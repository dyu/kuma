# ==================================================
# vars

src_dir = "src"
openssl_dir = "vendor/openssl"
sha1_dir = "vendor/sha1"

config("kuma_config") {
  include_dirs = [ "$src_dir", "$sha1_dir", "$openssl_dir/include" ]
  if (is_win) {
    libs = [
      "libeay32.lib",
      "ssleay32.lib",
      "zlib.lib",
      "gdi32.lib",
      #"ws2_32.lib",
    ]
  } else {
    libs = [
      "crypto",
      "ssl",
      "z",
    ]
  }
}

static_library("util") {
  sources = [
    "src/util/AutoCleaner.h",
    "src/util/ccqueue.h",
    "src/util/DataPacket.h",
    "src/util/DestroyDetector.h",
    "src/util/kmbuffer.h",
    "src/util/kmobject.h",
    "src/util/kmqueue.h",
    "src/util/SmartAssert.h",
    
    "src/util/util.h",
    "src/util/kmtrace.h",
    "src/util/base64.h",
    
    "src/util/util.cpp",
    "src/util/kmtrace.cpp",
    "src/util/base64.cpp",
    
    # vendor
    "$sha1_dir/sha1.cpp"
  ]
  
  public_configs = [ ":kuma_config" ]
}

static_library("net") {
  sources = [
    "src/EventLoopImpl.h",
    "src/AcceptorBase.h",
    "src/SocketBase.h",
    "src/UdpSocketBase.h",
    "src/TcpSocketImpl.h",
    "src/UdpSocketImpl.h",
    "src/TimerManager.h",
    "src/TcpListenerImpl.h",
    "src/TcpConnection.h",
    
    # poll
    "src/poll/IOPoll.h",
    "src/poll/Notifier.h",
    
    "src/EventLoopImpl.cpp",
    "src/AcceptorBase.cpp",
    "src/SocketBase.cpp",
    "src/UdpSocketBase.cpp",
    "src/TcpSocketImpl.cpp",
    "src/UdpSocketImpl.cpp",
    "src/TimerManager.cpp",
    "src/TcpListenerImpl.cpp",
    "src/TcpConnection.cpp",
    
    # poll
    "src/poll/Notifier.cpp",
    "src/poll/VPoll.cpp",
    "src/poll/SelectPoll.cpp",
  ]
  
  if (is_win) {
    sources += [
      "src/poll/IocpPoll.cpp",
    ]
  } else {
    sources += [
      "src/poll/EventNotifier.h",
      "src/poll/PipeNotifier.h",
      "src/poll/SocketNotifier.h",
      
      "src/poll/EPoll.cpp",
    ]
  }
  
  public_configs = [ ":kuma_config" ]
}


