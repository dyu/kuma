# ==================================================
# vars

src_dir = "src"
#openssl_include = "vendor/openssl/include"

if (is_win) {
  vcpkg_dir = "C:\\vcpkg\vcpkg"
  vcpkg_lib_dir = "$vcpkg_dir\\installed\\x64-windows-static\\lib"
  vcpkg_include_dir = "$vcpkg_dir\\installed\\x64-windows-static\\include"
}

config("kuma_config") {
  include_dirs = [ "$src_dir" ]
  if (is_win) {
    libs = [
      "libeay32.lib",
      "ssleay32.lib",
      "zlib.lib",
      "gdi32.lib",
      #"ws2_32.lib",
    ]
  } else {
    libs = [
      "crypto",
      "ssl",
      "z",
    ]
  }
}

static_library("util") {
  sources = [
    "src/util/AutoCleaner.h",
    "src/util/ccqueue.h",
    "src/util/DataPacket.h",
    "src/util/DestroyDetector.h",
    "src/util/kmbuffer.h",
    "src/util/kmobject.h",
    "src/util/kmqueue.h",
    "src/util/SmartAssert.h",
    
    "src/util/util.h",
    "src/util/kmtrace.h",
    "src/util/base64.h",
    
    "src/util/util.cpp",
    "src/util/kmtrace.cpp",
    "src/util/base64.cpp",
    
    # vendor
    "vendor/sha1/sha1.cpp"
  ]
  
  public_configs = [ ":kuma_config" ]
}

static_library("net") {
  sources = [
    "src/EventLoopImpl.h",
    "src/AcceptorBase.h",
    "src/SocketBase.h",
    "src/UdpSocketBase.h",
    "src/TcpSocketImpl.h",
    "src/UdpSocketImpl.h",
    "src/TimerManager.h",
    "src/TcpListenerImpl.h",
    "src/TcpConnection.h",
    
    # poll
    "src/poll/IOPoll.h",
    "src/poll/Notifier.h",
    
    # dns
    "src/DnsResolver.h",
    
    "src/EventLoopImpl.cpp",
    "src/AcceptorBase.cpp",
    "src/SocketBase.cpp",
    "src/UdpSocketBase.cpp",
    "src/TcpSocketImpl.cpp",
    "src/UdpSocketImpl.cpp",
    "src/TimerManager.cpp",
    "src/TcpListenerImpl.cpp",
    "src/TcpConnection.cpp",
    
    # poll
    "src/poll/Notifier.cpp",
    "src/poll/VPoll.cpp",
    "src/poll/SelectPoll.cpp",
    
    # dns
    "src/DnsResolver.cpp",
  ]
  
  #defines = [ "KUMA_HAS_OPENSSL" ]
  
  if (is_win) {
    sources += [
      "src/poll/IocpPoll.cpp",
    ]
  } else {
    sources += [
      "src/poll/EventNotifier.h",
      "src/poll/PipeNotifier.h",
      "src/poll/SocketNotifier.h",
      
      "src/poll/EPoll.cpp",
    ]
  }
  
  public_configs = [ ":kuma_config" ]
}

static_library("http") {
  sources = [
    "src/http/Uri.h",
    "src/http/HttpHeader.h",
    "src/http/HttpMessage.h",
    "src/http/HttpParserImpl.h",
    "src/http/HttpRequestImpl.h",
    "src/http/Http1xRequest.h",
    "src/http/HttpResponseImpl.h",
    "src/http/Http1xResponse.h",
    "src/http/HttpCache.h",
    
    "src/http/Uri.cpp",
    "src/http/HttpHeader.cpp",
    "src/http/HttpMessage.cpp",
    "src/http/HttpParserImpl.cpp",
    "src/http/HttpRequestImpl.cpp",
    "src/http/Http1xRequest.cpp",
    "src/http/HttpResponseImpl.cpp",
    "src/http/Http1xResponse.cpp",
    "src/http/HttpCache.cpp",
  ]
  
  public_configs = [ ":kuma_config" ]
}

static_library("http2") {
  sources = [
    "src/http/v2/H2Frame.h",
    "src/http/v2/FrameParser.h",
    "src/http/v2/FlowControl.h",
    "src/http/v2/H2Stream.h",
    "src/http/v2/Http2Request.h",
    "src/http/v2/Http2Response.h",
    "src/http/v2/H2ConnectionImpl.h",
    "src/http/v2/H2ConnectionMgr.h",
    "src/http/v2/h2utils.h",
    "src/http/v2/PushClient.h",
    "src/http/v2/hpack/HPackTable.h",
    "src/http/v2/hpack/HPacker.h",
    
    "src/http/v2/H2Frame.cpp",
    "src/http/v2/FrameParser.cpp",
    "src/http/v2/FlowControl.cpp",
    "src/http/v2/H2Stream.cpp",
    "src/http/v2/Http2Request.cpp",
    "src/http/v2/Http2Response.cpp",
    "src/http/v2/H2ConnectionImpl.cpp",
    "src/http/v2/H2ConnectionMgr.cpp",
    "src/http/v2/h2utils.cpp",
    "src/http/v2/PushClient.cpp",
    "src/http/v2/hpack/HPackTable.cpp",
    "src/http/v2/hpack/HPacker.cpp",
  ]
  
  #defines = [ "KUMA_HAS_OPENSSL" ]
  
  public_configs = [ ":kuma_config" ]
}

static_library("ws") {
  sources = [
    "src/ws/WSHandler.h",
    "src/ws/WebSocketImpl.h",
    
    "src/ws/WSHandler.cpp",
    "src/ws/WebSocketImpl.cpp",
  ]
  
  include_dirs = [ "vendor" ]
  
  public_configs = [ ":kuma_config" ]
}

config("ssl_config") {
  #defines = [ "KUMA_HAS_OPENSSL" ]
  if (is_win) {
    include_dirs = [ "$vcpkg_include_dir" ]
    ldflags = [ "/LIBPATH:$vcpkg_lib_dir" ]
    libs = [
      "libeay32.lib",
      "ssleay32.lib",
      "zlib.lib",
      "gdi32.lib",
    ]
  } else {
    libs = [
      "crypto",
      "ssl",
      "z",
    ]
  }
}

static_library("ssl") {
  sources = [
    "src/ssl/SslHandler.h",
    "src/ssl/BioHandler.h",
    "src/ssl/SioHandler.h",
    "src/ssl/OpenSslLib.h",
    
    "src/ssl/SslHandler.cpp",
    "src/ssl/BioHandler.cpp",
    "src/ssl/SioHandler.cpp",
    "src/ssl/OpenSslLib.cpp",
  ]
  
  #include_dirs = [ "$openssl_include" ]
  
  public_configs = [ ":kuma_config", ":ssl_config" ]
}

static_library("kuma") {
  sources = [
    "src/kmapi.h",
    "src/kmapi.cpp",
  ]
  
  deps = [
    ":util",
    ":net",
    ":http",
    ":http2",
    ":ws",
    ":ssl",
  ]
  
  public_configs = [ ":kuma_config" ]
}

# ==================================================
# executables

executable("test-server") {
  sources = [
    "test/server/LoopPool.cpp",
    "test/server/TestLoop.cpp",
    "test/server/TcpServer.cpp",
    "test/server/UdpServer.cpp",
    "test/server/TcpTest.cpp",
    "test/server/testutil.cpp",
    "test/server/HttpTest.cpp",
    "test/server/WsTest.cpp",
    "test/server/H2ConnTest.cpp",
    "test/server/ProtoDemuxer.cpp",
    "test/server/main.cpp",
  ]
  defines = [ "KUMA_GN" ]
  deps = [
    ":kuma",
  ]
}

executable("test-client") {
  sources = [
    "test/client/LoopPool.cpp",
    "test/client/TestLoop.cpp",
    "test/client/TcpClient.cpp",
    "test/client/HttpClient.cpp",
    "test/client/UdpClient.cpp",
    "test/client/WsClient.cpp",
    "test/client/main.cpp",
  ]
  deps = [
    ":kuma",
  ]
}

